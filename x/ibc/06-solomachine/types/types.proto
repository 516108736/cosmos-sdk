syntax = "proto3";
package cosmos_sdk.ibc.solomachine.v1;

option go_package = "github.com/cosmos/cosmos-sdk/x/ibc/06-solomachine/types";

import "google/protobuf/any.proto";
import "third_party/proto/gogoproto/gogo.proto";

// MsgCreateClient defines a message to create an IBC client
message MsgCreateClient {
    option (gogoproto.goproto_getters)  = false;
    string client_id = 1 [(gogoproto.customname) = "ClientID", (gogoproto.moretags) = "yaml:\"client_id\""];
    ConsensusState consensus_state    = 2 [(gogoproto.customname) = "ConsensusState", (gogoproto.nullable) = false];
}

// MsgUpdateClient defines a message to update an IBC client
message MsgUpdateClient {
    option (gogoproto.goproto_getters)  = false;
    string client_id = 1 [(gogoproto.customname) = "ClientID", (gogoproto.moretags) = "yaml:\"client_id\""];
    Header header    = 2 [(gogoproto.nullable) = false];
}

// MsgSubmitClientMisbehaviour defines an sdk.Msg type that supports submitting arbitrary
// Evidence.
message MsgSubmitClientMisbehaviour {
  option (gogoproto.goproto_getters)  = false;
  bytes submitter = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  google.protobuf.Any evidence = 2;
}

// ConsensusState defines a solo machine consensus state
message ConsensusState {
  option (gogoproto.goproto_getters) = false;
  // current sequence of the consensus state
  uint64 sequence = 1 [(gogoproto.moretags) = "yaml:\"sequence\""];
  // public key of the solo machine
  bytes new_pub_key = 2 [(gogoproto.customname) = "PubKey", (gogoproto.moretags) = "yaml:\"new_pub_key\""];

}

// Header defines a solo machine consensus header
message Header {
    option (gogoproto.goproto_getters) = false;
    // sequence to update solo machine public key at
    uint64 sequence = 1 [(gogoproto.moretags) = "yaml:\"sequence\""];
    bytes signature = 2 [(gogoproto.moretags) = "yaml:\"signature\""];
    bytes new_pub_key = 3 [(gogoproto.customname) = "NewPubKey", (gogoproto.moretags) = "yaml:\"new_pub_key\""];
}

// Evidence defines evidence of misbehaviour for a solo machine which consists of a sequence
// and two signatures over different messages at that sequence.
message Evidence {
    option (gogoproto.goproto_getters) = false;
    string client_id = 1 [(gogoproto.customname) = "ClientID", (gogoproto.moretags) = "yaml:\"client_id\""];
    uint64 sequence = 2 [(gogoproto.moretags) = "yaml:\"sequence\""]; 
    SignatureAndData signature_one = 3 [(gogoproto.customname) = "SignatureOne"];
    SignatureAndData signature_two = 4 [(gogoproto.customname) = "SignatureTwo"];
}

// SignatureAndData contains a signature and the data signed over to create that signature.
message SignatureAndData {
    option (gogoproto.goproto_getters) = false;
    bytes signature = 1 [(gogoproto.moretags) = "yaml:\"signature\""];
    bytes data = 2 [(gogoproto.moretags) = "yaml:\"data\""];
}
